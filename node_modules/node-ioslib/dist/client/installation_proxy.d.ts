/// <reference types="node" />
import * as net from 'net';
import { ServiceClient } from './client';
import { LockdownCommand, LockdownProtocolClient } from '../protocol/lockdown';
interface IPOptions {
    "ApplicationsType"?: "Any";
    "PackageType"?: "Developer";
    "CFBundleIdentifier"?: string;
    "ReturnAttributes"?: ("CFBundleIdentifier" | "CFBundleExecutable" | "Container" | "Path")[];
    "BundleIDs"?: string[];
}
interface IPMessage extends LockdownCommand {
    Command: string;
    ClientOptions: IPOptions;
}
export interface IPLookupResult {
    [key: string]: {
        Container: string;
        CFBundleIdentifier: string;
        CFBundleExecutable: string;
        Path: string;
    };
}
export declare class InstallationProxyClient extends ServiceClient<LockdownProtocolClient<IPMessage>> {
    socket: net.Socket;
    constructor(socket: net.Socket);
    lookupApp(bundleIds: string[], options?: IPOptions): Promise<IPLookupResult>;
    installApp(packagePath: string, bundleId: string, options?: IPOptions): Promise<void>;
}
export {};
